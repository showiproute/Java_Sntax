堆内存、栈内存、引用变量
Java把内存划分成两种：一种是栈内存，一种是堆内存。

栈内存：
在方法中定义的一些基本类型的变量和对象的引用变量都是在方法的栈内存中分配。
当在一段代码块中定义一个变量时，java就在栈中为这个变量分配内存空间，当超过变量的作用域后，java会自动释放掉为该变量分配的内存空间，该内存空间可以立刻被另作他用。
运行速度快，主要用来执行程序。
堆内存：
堆内存用于存放由new创建的对象和数组。
在堆中分配的内存，由java虚拟机自动垃圾回收器来管理。
运行速度慢，主要用于创建数组、对象。

引用变量与栈内存、堆内存的关系：
在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊的变量，这个变量的取值等于数组或者对象在堆内存中的首地址，在栈中的这个特殊的变量就变成了数组或者对象的引用变量。
引用变量就相当于是为数组或对象起的一个名称，以后就可以在程序中使用栈中的引用变量来访问堆中的数组或对象。

//引用变量是普通变量，定义时在栈中分配内存，引用变量在程序运行到作用域外释放。而数组和对象本身在堆中分配，即使程序运行到使用new产生数组和对象的语句所在地代码块之外，数组和对象本身占用的堆内存也不会被释放，数组和对象在没有引用变量指向它的时候，才变成垃圾，不能再被使用，但是仍然占着内存，在随后的一个不确定的时间被垃圾回收器释放掉。这个也是java比较占内存的主要原因，实际上，栈中的引用变量指向堆内存中的变量（数组或对象本身），这就是 Java 中的指针!
